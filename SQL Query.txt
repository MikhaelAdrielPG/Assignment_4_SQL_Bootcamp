CREATE DATABASE bootcamp;

CREATE TABLE Participants (
    participant_id INT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    phone_number VARCHAR(255)
);

CREATE TABLE Assignments (
    assignment_id INT PRIMARY KEY,
    title VARCHAR(255),
    description TEXT
);

CREATE TABLE Instructors (
    instructor_id INT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255), 
    phone_number VARCHAR(255)
);

CREATE TABLE Scores (
    score_id INT PRIMARY KEY,
    participant_id INT,
    assignment_id INT,
    instructor_id INT,
    score FLOAT,
    FOREIGN KEY (participant_id) REFERENCES Participants(participant_id),
    FOREIGN KEY (assignment_id) REFERENCES Assignments(assignment_id),
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)
);

INSERT INTO Participants (participant_id, name, email, phone_number)
VALUES
    (1, 'John Doe', 'john@example.com', '123-456-7890'),
    (2, 'Jane Smith', 'jane@example.com', '987-654-3210'),
    (3, 'Michael Johnson', 'michael@example.com', '555-123-4567'),
    (4, 'Emily Brown', 'emily@example.com', '444-555-6666'),
    (5, 'David Lee', 'david@example.com', '777-888-9999'),
    (6, 'Sarah Wilson', 'sarah@example.com', '222-333-4444');

INSERT INTO Assignments (assignment_id, title, description)
VALUES
    (1, 'Essay on History', 'Write an essay on the significance of the Industrial Revolution.'),
    (2, 'Math Problem Set', 'Complete the math problems from chapter 5.'),
    (3, 'Science Experiment', 'Perform the experiment and submit your findings.'),
    (4, 'Literary Analysis', 'Analyze the themes in the novel "Pride and Prejudice".'),
    (5, 'Coding Project', 'Develop a simple web application using HTML and CSS.'),
    (6, 'Art Portfolio', 'Create a portfolio showcasing your recent artworks.'),
    (7, 'Language Translation', 'Translate the provided paragraph from English to French.'),
    (8, 'Music Composition', 'Compose a short piece of music in your preferred genre.'),
    (9, 'Physics Quiz', 'Take the online quiz on basic principles of physics.'),
    (10, 'Social Studies Presentation', 'Prepare a presentation about a historical event.');

INSERT INTO Instructors (instructor_id, name, email, phone_number)
VALUES
    (1, 'Professor Smith', 'prof.smith@example.com', '111-222-3333'),
    (2, 'Dr. Johnson', 'dr.johnson@example.com', '444-555-6666'),
    (3, 'Ms. Davis', 'ms.davis@example.com', '777-888-9999'),
    (4, 'Mr. Anderson', 'mr.anderson@example.com', '555-123-4567');

INSERT INTO Scores (score_id, participant_id, assignment_id, instructor_id, score)
VALUES
    (1, 1, 1, 1, 85.5),
    (2, 1, 2, 2, 92.0),
    (3, 2, 1, 1, 78.3),
    (4, 2, 3, 3, 88.7),
    (5, 3, 4, 2, 95.2),
    (6, 3, 5, 4, 70.8),
    (7, 4, 2, 1, 81.6),
    (8, 4, 6, 3, 89.9),
    (9, 5, 3, 2, 93.5),
    (10, 5, 7, 4, 75.0),
    (11, 6, 5, 1, 87.2),
    (12, 6, 8, 3, 91.4),
    (13, 1, 9, 2, 98.1),
    (14, 2, 10, 4, 82.7),
    (15, 3, 8, 1, 79.8),
    (16, 4, 7, 3, 84.6),
    (17, 5, 6, 2, 88.3),
    (18, 6, 9, 1, 96.5);

1. SELECT p.name AS participant_name, a.title AS assignment_title, i.name AS instructor_name, s.score
FROM Participants p
INNER JOIN Scores s ON p.participant_id = s.participant_id
INNER JOIN Assignments a ON s.assignment_id = a.assignment_id
INNER JOIN Instructors i ON s.instructor_id = i.instructor_id
WHERE p.name = 'John Doe';

2. SELECT p.name, AVG(s.score) AS average_score
FROM Participants p
INNER JOIN Scores s ON p.participant_id = s.participant_id
GROUP BY p.name;

3. SELECT
    CASE
        WHEN s.score >= 80 THEN '100-80'
        WHEN s.score >= 60 THEN '80-60'
        WHEN s.score >= 40 THEN '60-40'
        WHEN s.score >= 20 THEN '40-20'
        ELSE '20-0'
    END AS score_range,
    COUNT(*) AS participant_count
FROM Scores s
GROUP BY score_range;

4. SELECT
    CASE
        WHEN s.score >= 80 THEN '100-80'
        WHEN s.score >= 60 THEN '80-60'
        WHEN s.score >= 40 THEN '60-40'
        WHEN s.score >= 20 THEN '40-20'
        ELSE '20-0'
    END AS score_range,
    GROUP_CONCAT(p.name) AS participants_name
FROM Scores s
INNER JOIN Participants p ON s.participant_id = p.participant_id
GROUP BY score_range;


5. ALTER TABLE Scores ADD COLUMN assessment_date DATE;

UPDATE Scores
SET assessment_date = '2023-08-31'
WHERE score_id IN (1, 2, 3, 4, 5, 6, 7, 8,9);

UPDATE Scores
SET assessment_date = '2023-08-01'
WHERE score_id IN (10, 11, 12);

UPDATE Scores
SET assessment_date = '2023-08-15'
WHERE score_id IN (13, 14, 15, 16);

UPDATE Scores
SET assessment_date = '2023-09-01'
WHERE score_id IN (17, 18);

SELECT
    assessment_date,
    COUNT(*) AS assessment_count
FROM Scores
WHERE assessment_date = '2023-09-01'
GROUP BY assessment_date;
